#pragma repy restrictions.loose dylink.r2py

affixlib = dy_import_module("affixstackinterface.r2py")
rsa = dy_import_module("rsa.r2py")
sha = dy_import_module("sha.r2py")

original_openconnection = openconnection

nodeman_file = openfile("nodeman.cfg", False)
nodeman_content = "mydict = " + nodeman_file.readat(10000, 0)
nodeman_file.close()

new_namespace = createvirtualnamespace(nodeman_content, "nodeman")
nodeman_dict = new_namespace.evaluate({})
mypubkey = rsa.rsa_publickey_to_string(nodeman_dict["mydict"]["publickey"]).replace(" ", "")

my_zeno_name = sha.sha_hexhash(mypubkey) + ".zenodotus.poly.edu"
myaffix = affixlib.AffixStackInterface("(CoordinationAffix)", my_zeno_name)


def new_openconnection(destip, destport, localip, localport, timeout):
  if destip.endswith("zenodotus.poly.edu"):
    return myaffix.openconnection(destip, destport, localip, localport, timeout)
  return original_openconnection(destip, destport, localip, localport, timeout)

openconnection = new_openconnection

def error_and_exit(sleep_time):

  def _helper_error_and_exit():
    sleep(sleep_time)
    log("Error:Can wait for more than 15 seconds!\n")
    exitall()

  return _helper_error_and_exit


if callfunc == 'initialize':

  ip = my_zeno_name
  timeout = 10

  # nm will only wait 10 seconds for a connection to have activity...
  socketobj = openconnection(ip,<nodemanager_port>,ip,<connport>,timeout)
  # the node manager should time the socket out before this fires...
  createthread(error_and_exit(15))

  while True:
    try:
      socketobj.recv(1)
      break
    except SocketWouldBlockError:
      sleep(0.1)
    except SocketClosedRemote:
      exitall()
      raise

  log("Error, should not return from recv!?!\n")
  

